I"ÀÜ<p>This is Part 2 of 2. I decided to take on the [Occupancy dataset from UCI Machine Learning][occupancy]. With this dataset, I wanted to accomplish 2 tasks:</p>

<ol>
  <li>Predict the occupancy of a room given parameters.</li>
  <li>Conduct Time Series Analysis to forecast the parameters and predict occupancy.</li>
</ol>

<p>The tasks may sound similar, but theyâ€™re actually different. The first one does not take the time into account, but rather uses the parameters or a subset of the parameters given (Light, Humidity, Temperature, CO2, etc.) to predict the occupancy of the room (binary -&gt; 0 or 1). The second task actually does take the time into account, and forecasts the individual parameters to predict the occupancy of the room at specific times where the parameters were forecast.</p>

<p>Fit time series forecasting models with Facebook Prophet</p>

<p>The range of date for the df_train set is 2015-02-04 17:51:00 (Wed) through 2015-02-10 09:33:00 (Tues).<br />
The range of date for the df_val set is 2015-02-11 14:48:00 (Wed) through 2015-02-14 23:59:00 (Sat).<br />
The range of date for the df_test set is 2015-02-15 through (Sun) 2015-02-18 09:19:00 (Wed).<br />
Fit the predicted time series for the individual parameters to align with the day of week and time on the df_val set.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Prophet requires columns ds (Date) and y (value)
</span><span class="n">X_df_train_forecast</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">[[</span><span class="s">'Temperature'</span><span class="p">,</span> <span class="s">'Humidity'</span><span class="p">,</span> <span class="s">'Light'</span><span class="p">,</span> <span class="s">'CO2'</span><span class="p">]]</span>
<span class="n">X_df_train_forecast</span><span class="p">[</span><span class="s">'ds'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">.</span><span class="n">index</span>
<span class="n">X_df_train_forecast</span><span class="p">[</span><span class="s">'y'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">[</span><span class="s">'Temperature'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X_df_train_forecast</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Temperature</th>
      <th>Humidity</th>
      <th>Light</th>
      <th>CO2</th>
      <th>ds</th>
      <th>y</th>
    </tr>
    <tr>
      <th>date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>2015-02-04 17:51:00</td>
      <td>23.18</td>
      <td>27.2720</td>
      <td>426.0</td>
      <td>721.250000</td>
      <td>2015-02-04 17:51:00</td>
      <td>23.18</td>
    </tr>
    <tr>
      <td>2015-02-04 17:52:00</td>
      <td>23.15</td>
      <td>27.2675</td>
      <td>429.5</td>
      <td>714.000000</td>
      <td>2015-02-04 17:52:00</td>
      <td>23.15</td>
    </tr>
    <tr>
      <td>2015-02-04 17:53:00</td>
      <td>23.15</td>
      <td>27.2450</td>
      <td>426.0</td>
      <td>713.500000</td>
      <td>2015-02-04 17:53:00</td>
      <td>23.15</td>
    </tr>
    <tr>
      <td>2015-02-04 17:54:00</td>
      <td>23.15</td>
      <td>27.2000</td>
      <td>426.0</td>
      <td>708.250000</td>
      <td>2015-02-04 17:54:00</td>
      <td>23.15</td>
    </tr>
    <tr>
      <td>2015-02-04 17:55:00</td>
      <td>23.10</td>
      <td>27.2000</td>
      <td>426.0</td>
      <td>704.500000</td>
      <td>2015-02-04 17:55:00</td>
      <td>23.10</td>
    </tr>
    <tr>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <td>2015-02-10 09:29:00</td>
      <td>21.05</td>
      <td>36.0975</td>
      <td>433.0</td>
      <td>787.250000</td>
      <td>2015-02-10 09:29:00</td>
      <td>21.05</td>
    </tr>
    <tr>
      <td>2015-02-10 09:30:00</td>
      <td>21.05</td>
      <td>35.9950</td>
      <td>433.0</td>
      <td>789.500000</td>
      <td>2015-02-10 09:30:00</td>
      <td>21.05</td>
    </tr>
    <tr>
      <td>2015-02-10 09:31:00</td>
      <td>21.10</td>
      <td>36.0950</td>
      <td>433.0</td>
      <td>798.500000</td>
      <td>2015-02-10 09:31:00</td>
      <td>21.10</td>
    </tr>
    <tr>
      <td>2015-02-10 09:32:00</td>
      <td>21.10</td>
      <td>36.2600</td>
      <td>433.0</td>
      <td>820.333333</td>
      <td>2015-02-10 09:32:00</td>
      <td>21.10</td>
    </tr>
    <tr>
      <td>2015-02-10 09:33:00</td>
      <td>21.10</td>
      <td>36.2000</td>
      <td>447.0</td>
      <td>821.000000</td>
      <td>2015-02-10 09:33:00</td>
      <td>21.10</td>
    </tr>
  </tbody>
</table>
<p>8143 rows Ã— 6 columns</p>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">is_weekday</span><span class="p">(</span><span class="n">ds</span><span class="p">):</span>
    <span class="n">date</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">to_datetime</span><span class="p">(</span><span class="n">ds</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">date</span><span class="p">.</span><span class="n">day</span> <span class="o">!=</span> <span class="mi">7</span> <span class="ow">and</span> <span class="n">date</span><span class="p">.</span><span class="n">day</span> <span class="o">!=</span> <span class="mi">8</span> <span class="ow">and</span> <span class="n">date</span><span class="p">.</span><span class="n">day</span> <span class="o">!=</span> <span class="mi">14</span> <span class="ow">and</span> <span class="n">date</span><span class="p">.</span><span class="n">day</span> <span class="o">!=</span> <span class="mi">15</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X_df_train_forecast</span><span class="p">[</span><span class="s">'weekday'</span><span class="p">]</span> <span class="o">=</span> <span class="n">X_df_train_forecast</span><span class="p">[</span><span class="s">'ds'</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="n">is_weekday</span><span class="p">)</span>
<span class="n">X_df_train_forecast</span><span class="p">[</span><span class="s">'weekend'</span><span class="p">]</span> <span class="o">=</span> <span class="o">~</span><span class="n">X_df_train_forecast</span><span class="p">[</span><span class="s">'ds'</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="n">is_weekday</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Model seasonality to make forecasts for Temperature
</span><span class="n">m</span> <span class="o">=</span> <span class="n">Prophet</span><span class="p">(</span><span class="n">daily_seasonality</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">weekly_seasonality</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">yearly_seasonality</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">m</span><span class="p">.</span><span class="n">add_seasonality</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'daily_weekday'</span><span class="p">,</span> <span class="n">period</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">fourier_order</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">condition_name</span><span class="o">=</span><span class="s">'weekday'</span><span class="p">)</span>
<span class="n">m</span><span class="p">.</span><span class="n">add_seasonality</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'daily_weekend'</span><span class="p">,</span> <span class="n">period</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">fourier_order</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">condition_name</span><span class="o">=</span><span class="s">'weekend'</span><span class="p">)</span>
<span class="n">m</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_df_train_forecast</span><span class="p">)</span>
<span class="c1"># Make a future dataframe up to 2015-02-18 09:19:00
</span><span class="n">temp_forecast</span> <span class="o">=</span> <span class="n">m</span><span class="p">.</span><span class="n">make_future_dataframe</span><span class="p">(</span><span class="n">periods</span><span class="o">=</span><span class="mi">60</span><span class="o">*</span><span class="mi">24</span><span class="o">*</span><span class="mi">8</span><span class="p">,</span> <span class="n">freq</span><span class="o">=</span><span class="s">'T'</span><span class="p">)</span>
<span class="n">temp_forecast</span><span class="p">[</span><span class="s">'weekday'</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp_forecast</span><span class="p">[</span><span class="s">'ds'</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="n">is_weekday</span><span class="p">)</span>
<span class="n">temp_forecast</span><span class="p">[</span><span class="s">'weekend'</span><span class="p">]</span> <span class="o">=</span> <span class="o">~</span><span class="n">temp_forecast</span><span class="p">[</span><span class="s">'ds'</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="n">is_weekday</span><span class="p">)</span>
<span class="c1"># Make predictions
</span><span class="n">forecast</span> <span class="o">=</span> <span class="n">m</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">temp_forecast</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">m</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">forecast</span><span class="p">,</span> <span class="n">xlabel</span> <span class="o">=</span> <span class="s">'Date'</span><span class="p">,</span> <span class="n">ylabel</span> <span class="o">=</span> <span class="s">'Temperature'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Temperature'</span><span class="p">);</span>
</code></pre></div></div>

<p><img src="/images/output_108_0.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X_df_train_forecast</span><span class="p">[</span><span class="s">'TempForecast'</span><span class="p">]</span> <span class="o">=</span> <span class="n">forecast</span><span class="p">[</span><span class="s">'yhat'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">temp_fc</span> <span class="o">=</span> <span class="n">forecast</span><span class="p">[[</span><span class="s">'ds'</span><span class="p">,</span> <span class="s">'yhat'</span><span class="p">]].</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s">"ds"</span><span class="p">:</span> <span class="s">"date"</span><span class="p">,</span> <span class="s">"yhat"</span><span class="p">:</span> <span class="s">"TempForecast"</span><span class="p">}).</span><span class="n">set_index</span><span class="p">(</span><span class="s">'date'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">temp_fc</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>TempForecast</th>
    </tr>
    <tr>
      <th>date</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>2015-02-04 17:51:00</td>
      <td>22.825499</td>
    </tr>
    <tr>
      <td>2015-02-04 17:52:00</td>
      <td>22.819885</td>
    </tr>
    <tr>
      <td>2015-02-04 17:53:00</td>
      <td>22.814238</td>
    </tr>
    <tr>
      <td>2015-02-04 17:54:00</td>
      <td>22.808558</td>
    </tr>
    <tr>
      <td>2015-02-04 17:55:00</td>
      <td>22.802846</td>
    </tr>
    <tr>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <td>2015-02-18 09:29:00</td>
      <td>26.606772</td>
    </tr>
    <tr>
      <td>2015-02-18 09:30:00</td>
      <td>26.613720</td>
    </tr>
    <tr>
      <td>2015-02-18 09:31:00</td>
      <td>26.620671</td>
    </tr>
    <tr>
      <td>2015-02-18 09:32:00</td>
      <td>26.627625</td>
    </tr>
    <tr>
      <td>2015-02-18 09:33:00</td>
      <td>26.634581</td>
    </tr>
  </tbody>
</table>
<p>19663 rows Ã— 1 columns</p>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_val</span> <span class="o">=</span> <span class="n">df_val</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">temp_fc</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="s">'date'</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s">'inner'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_val</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="p">[</span><span class="s">"Temperature"</span><span class="p">,</span> <span class="s">"TempForecast"</span><span class="p">],</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x12dc51b90&gt;
</code></pre></div></div>

<p><img src="/images/output_113_1.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Model seasonality to make forecasts for Humidity
</span><span class="n">m</span> <span class="o">=</span> <span class="n">Prophet</span><span class="p">(</span><span class="n">daily_seasonality</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">weekly_seasonality</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">yearly_seasonality</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">m</span><span class="p">.</span><span class="n">add_seasonality</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'daily_weekday'</span><span class="p">,</span> <span class="n">period</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">fourier_order</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">condition_name</span><span class="o">=</span><span class="s">'weekday'</span><span class="p">)</span>
<span class="n">m</span><span class="p">.</span><span class="n">add_seasonality</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'daily_weekend'</span><span class="p">,</span> <span class="n">period</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">fourier_order</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">condition_name</span><span class="o">=</span><span class="s">'weekend'</span><span class="p">)</span>
<span class="n">X_df_train_forecast</span><span class="p">[</span><span class="s">'y'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">[</span><span class="s">'Humidity'</span><span class="p">]</span>
<span class="n">m</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_df_train_forecast</span><span class="p">)</span>
<span class="c1"># Make a future dataframe up to 2015-02-18 09:19:00
</span><span class="n">hum_forecast</span> <span class="o">=</span> <span class="n">m</span><span class="p">.</span><span class="n">make_future_dataframe</span><span class="p">(</span><span class="n">periods</span><span class="o">=</span><span class="mi">60</span><span class="o">*</span><span class="mi">24</span><span class="o">*</span><span class="mi">8</span><span class="p">,</span> <span class="n">freq</span><span class="o">=</span><span class="s">'T'</span><span class="p">)</span>
<span class="n">hum_forecast</span><span class="p">[</span><span class="s">'weekday'</span><span class="p">]</span> <span class="o">=</span> <span class="n">hum_forecast</span><span class="p">[</span><span class="s">'ds'</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="n">is_weekday</span><span class="p">)</span>
<span class="n">hum_forecast</span><span class="p">[</span><span class="s">'weekend'</span><span class="p">]</span> <span class="o">=</span> <span class="o">~</span><span class="n">hum_forecast</span><span class="p">[</span><span class="s">'ds'</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="n">is_weekday</span><span class="p">)</span>
<span class="c1"># Make predictions
</span><span class="n">forecast</span> <span class="o">=</span> <span class="n">m</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">hum_forecast</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X_df_train_forecast</span><span class="p">[</span><span class="s">'HumForecast'</span><span class="p">]</span> <span class="o">=</span> <span class="n">forecast</span><span class="p">[</span><span class="s">'yhat'</span><span class="p">]</span>
<span class="n">hum_fc</span> <span class="o">=</span> <span class="n">forecast</span><span class="p">[[</span><span class="s">'ds'</span><span class="p">,</span> <span class="s">'yhat'</span><span class="p">]].</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s">"ds"</span><span class="p">:</span> <span class="s">"date"</span><span class="p">,</span> <span class="s">"yhat"</span><span class="p">:</span> <span class="s">"HumForecast"</span><span class="p">}).</span><span class="n">set_index</span><span class="p">(</span><span class="s">'date'</span><span class="p">)</span>
<span class="n">df_val</span> <span class="o">=</span> <span class="n">df_val</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">hum_fc</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="s">'date'</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s">'inner'</span><span class="p">)</span>
<span class="n">df_val</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="p">[</span><span class="s">"Humidity"</span><span class="p">,</span> <span class="s">"HumForecast"</span><span class="p">],</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x12de316d0&gt;
</code></pre></div></div>

<p><img src="/images/output_115_1.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Model seasonality to make forecasts for Light
</span><span class="n">m</span> <span class="o">=</span> <span class="n">Prophet</span><span class="p">(</span><span class="n">daily_seasonality</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">weekly_seasonality</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">yearly_seasonality</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">m</span><span class="p">.</span><span class="n">add_seasonality</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'daily_weekday'</span><span class="p">,</span> <span class="n">period</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">fourier_order</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">condition_name</span><span class="o">=</span><span class="s">'weekday'</span><span class="p">)</span>
<span class="n">m</span><span class="p">.</span><span class="n">add_seasonality</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'daily_weekend'</span><span class="p">,</span> <span class="n">period</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">fourier_order</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">condition_name</span><span class="o">=</span><span class="s">'weekend'</span><span class="p">)</span>
<span class="n">X_df_train_forecast</span><span class="p">[</span><span class="s">'y'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">[</span><span class="s">'Light'</span><span class="p">]</span>
<span class="n">m</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_df_train_forecast</span><span class="p">)</span>
<span class="c1"># Make a future dataframe up to 2015-02-18 09:19:00
</span><span class="n">light_forecast</span> <span class="o">=</span> <span class="n">m</span><span class="p">.</span><span class="n">make_future_dataframe</span><span class="p">(</span><span class="n">periods</span><span class="o">=</span><span class="mi">60</span><span class="o">*</span><span class="mi">24</span><span class="o">*</span><span class="mi">8</span><span class="p">,</span> <span class="n">freq</span><span class="o">=</span><span class="s">'T'</span><span class="p">)</span>
<span class="n">light_forecast</span><span class="p">[</span><span class="s">'weekday'</span><span class="p">]</span> <span class="o">=</span> <span class="n">light_forecast</span><span class="p">[</span><span class="s">'ds'</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="n">is_weekday</span><span class="p">)</span>
<span class="n">light_forecast</span><span class="p">[</span><span class="s">'weekend'</span><span class="p">]</span> <span class="o">=</span> <span class="o">~</span><span class="n">light_forecast</span><span class="p">[</span><span class="s">'ds'</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="n">is_weekday</span><span class="p">)</span>
<span class="c1"># Make predictions
</span><span class="n">forecast</span> <span class="o">=</span> <span class="n">m</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">light_forecast</span><span class="p">)</span>
<span class="n">X_df_train_forecast</span><span class="p">[</span><span class="s">'LightForecast'</span><span class="p">]</span> <span class="o">=</span> <span class="n">forecast</span><span class="p">[</span><span class="s">'yhat'</span><span class="p">]</span>
<span class="n">light_fc</span> <span class="o">=</span> <span class="n">forecast</span><span class="p">[[</span><span class="s">'ds'</span><span class="p">,</span> <span class="s">'yhat'</span><span class="p">]].</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s">"ds"</span><span class="p">:</span> <span class="s">"date"</span><span class="p">,</span> <span class="s">"yhat"</span><span class="p">:</span> <span class="s">"LightForecast"</span><span class="p">}).</span><span class="n">set_index</span><span class="p">(</span><span class="s">'date'</span><span class="p">)</span>
<span class="n">df_val</span> <span class="o">=</span> <span class="n">df_val</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">light_fc</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="s">'date'</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s">'inner'</span><span class="p">)</span>
<span class="c1"># Plot Light vs. Forecasted Light
</span><span class="n">df_val</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="p">[</span><span class="s">"Light"</span><span class="p">,</span> <span class="s">"LightForecast"</span><span class="p">],</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x103db8190&gt;
</code></pre></div></div>

<p><img src="/images/output_116_1.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Model seasonality to make forecasts for CO2
</span><span class="n">m</span> <span class="o">=</span> <span class="n">Prophet</span><span class="p">(</span><span class="n">daily_seasonality</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">weekly_seasonality</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">yearly_seasonality</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">m</span><span class="p">.</span><span class="n">add_seasonality</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'daily_weekday'</span><span class="p">,</span> <span class="n">period</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">fourier_order</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">condition_name</span><span class="o">=</span><span class="s">'weekday'</span><span class="p">)</span>
<span class="n">m</span><span class="p">.</span><span class="n">add_seasonality</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'daily_weekend'</span><span class="p">,</span> <span class="n">period</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">fourier_order</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">condition_name</span><span class="o">=</span><span class="s">'weekend'</span><span class="p">)</span>
<span class="n">X_df_train_forecast</span><span class="p">[</span><span class="s">'y'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">[</span><span class="s">'CO2'</span><span class="p">]</span>
<span class="n">m</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_df_train_forecast</span><span class="p">)</span>
<span class="c1"># Make a future dataframe up to 2015-02-18 09:19:00
</span><span class="n">co2_forecast</span> <span class="o">=</span> <span class="n">m</span><span class="p">.</span><span class="n">make_future_dataframe</span><span class="p">(</span><span class="n">periods</span><span class="o">=</span><span class="mi">60</span><span class="o">*</span><span class="mi">24</span><span class="o">*</span><span class="mi">8</span><span class="p">,</span> <span class="n">freq</span><span class="o">=</span><span class="s">'T'</span><span class="p">)</span>
<span class="n">co2_forecast</span><span class="p">[</span><span class="s">'weekday'</span><span class="p">]</span> <span class="o">=</span> <span class="n">co2_forecast</span><span class="p">[</span><span class="s">'ds'</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="n">is_weekday</span><span class="p">)</span>
<span class="n">co2_forecast</span><span class="p">[</span><span class="s">'weekend'</span><span class="p">]</span> <span class="o">=</span> <span class="o">~</span><span class="n">co2_forecast</span><span class="p">[</span><span class="s">'ds'</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="n">is_weekday</span><span class="p">)</span>
<span class="c1"># Make predictions
</span><span class="n">forecast</span> <span class="o">=</span> <span class="n">m</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">co2_forecast</span><span class="p">)</span>
<span class="n">X_df_train_forecast</span><span class="p">[</span><span class="s">'CO2Forecast'</span><span class="p">]</span> <span class="o">=</span> <span class="n">forecast</span><span class="p">[</span><span class="s">'yhat'</span><span class="p">]</span>
<span class="n">co2_fc</span> <span class="o">=</span> <span class="n">forecast</span><span class="p">[[</span><span class="s">'ds'</span><span class="p">,</span> <span class="s">'yhat'</span><span class="p">]].</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s">"ds"</span><span class="p">:</span> <span class="s">"date"</span><span class="p">,</span> <span class="s">"yhat"</span><span class="p">:</span> <span class="s">"CO2Forecast"</span><span class="p">}).</span><span class="n">set_index</span><span class="p">(</span><span class="s">'date'</span><span class="p">)</span>
<span class="n">df_val</span> <span class="o">=</span> <span class="n">df_val</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">co2_fc</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="s">'date'</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s">'inner'</span><span class="p">)</span>
<span class="n">df_val</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="p">[</span><span class="s">"CO2"</span><span class="p">,</span> <span class="s">"CO2Forecast"</span><span class="p">],</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x138147810&gt;
</code></pre></div></div>

<p><img src="/images/output_117_1.png" alt="png" /></p>

<p>Predict Occupancy with forecasted parameters</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Separate X and y
</span><span class="n">X_df_val</span> <span class="o">=</span> <span class="n">df_val</span><span class="p">[[</span><span class="s">'TempForecast'</span><span class="p">,</span> <span class="s">'HumForecast'</span><span class="p">,</span> <span class="s">'LightForecast'</span><span class="p">,</span> <span class="s">'CO2Forecast'</span><span class="p">]]</span>
<span class="n">y_df_val</span> <span class="o">=</span> <span class="n">df_val</span><span class="p">[</span><span class="s">'Occupancy'</span><span class="p">]</span>

<span class="c1"># Add columns for Weekday and WorkHours
</span><span class="n">X_df_val</span><span class="p">[</span><span class="s">'Weekday'</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">where</span><span class="p">((</span><span class="n">X_df_val</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">day</span> <span class="o">==</span> <span class="mi">14</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">X_df_val</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">day</span> <span class="o">==</span> <span class="mi">15</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">X_df_val</span><span class="p">[</span><span class="s">'WorkHours'</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">where</span><span class="p">((</span><span class="n">X_df_val</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">hour</span> <span class="o">&gt;=</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">X_df_val</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">hour</span> <span class="o">&lt;=</span> <span class="mi">6</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>

<span class="c1"># Split into validation and test sets
</span><span class="n">X_df_test</span> <span class="o">=</span> <span class="n">X_df_val</span><span class="p">[</span><span class="n">df_val</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">day</span> <span class="o">&gt;=</span> <span class="mi">15</span><span class="p">]</span>
<span class="n">y_df_test</span> <span class="o">=</span> <span class="n">y_df_val</span><span class="p">[</span><span class="n">df_val</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">day</span> <span class="o">&gt;=</span> <span class="mi">15</span><span class="p">]</span>
<span class="n">X_df_val</span> <span class="o">=</span> <span class="n">X_df_val</span><span class="p">[</span><span class="n">df_val</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">day</span> <span class="o">&lt;=</span> <span class="mi">14</span><span class="p">]</span>
<span class="n">y_df_val</span> <span class="o">=</span> <span class="n">y_df_val</span><span class="p">[</span><span class="n">df_val</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">day</span> <span class="o">&lt;=</span> <span class="mi">14</span><span class="p">]</span>

<span class="c1"># Normalize appropriate columns for building Classification Models
</span><span class="n">cols_to_norm</span> <span class="o">=</span> <span class="p">[</span><span class="s">'TempForecast'</span><span class="p">,</span> <span class="s">'HumForecast'</span><span class="p">,</span> <span class="s">'LightForecast'</span><span class="p">,</span> <span class="s">'CO2Forecast'</span><span class="p">]</span>
<span class="n">X_df_val</span><span class="p">[</span><span class="n">cols_to_norm</span><span class="p">]</span> <span class="o">=</span> <span class="n">X_df_val</span><span class="p">[</span><span class="n">cols_to_norm</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">x</span><span class="p">.</span><span class="nb">min</span><span class="p">())</span> <span class="o">/</span> <span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="nb">max</span><span class="p">()</span> <span class="o">-</span> <span class="n">x</span><span class="p">.</span><span class="nb">min</span><span class="p">()))</span>
<span class="n">X_df_test</span><span class="p">[</span><span class="n">cols_to_norm</span><span class="p">]</span> <span class="o">=</span> <span class="n">X_df_test</span><span class="p">[</span><span class="n">cols_to_norm</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">x</span><span class="p">.</span><span class="nb">min</span><span class="p">())</span> <span class="o">/</span> <span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="nb">max</span><span class="p">()</span> <span class="o">-</span> <span class="n">x</span><span class="p">.</span><span class="nb">min</span><span class="p">()))</span>

<span class="c1"># Rename variables for easier implementation
</span><span class="n">X_train</span> <span class="o">=</span> <span class="n">X_df_train</span>
<span class="n">y_train</span> <span class="o">=</span> <span class="n">y_df_train</span>
<span class="n">X_test</span> <span class="o">=</span> <span class="n">X_df_val</span>
<span class="n">y_test</span> <span class="o">=</span> <span class="n">y_df_val</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Implement Logistic Regression
</span><span class="n">logreg</span> <span class="o">=</span> <span class="n">LogisticRegression</span><span class="p">(</span><span class="n">solver</span><span class="o">=</span><span class="s">'lbfgs'</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="c1"># Fit model: Predict y from x_test after training on x_train and y_train
</span><span class="n">y_pred</span> <span class="o">=</span> <span class="n">logreg</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">).</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
<span class="c1"># Report testing accuracy
</span><span class="k">print</span><span class="p">(</span><span class="s">"Testing accuracy out of a total %d points : %f"</span> <span class="o">%</span> <span class="p">(</span><span class="n">X_test</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">accuracy_score</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">)))</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Testing accuracy out of a total 4872 points : 0.791872
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Implement the Gaussian Naive Bayes algorithm for classification
</span><span class="n">gnb</span> <span class="o">=</span> <span class="n">GaussianNB</span><span class="p">()</span>
<span class="c1"># Fit model: Predict y from x_test after training on x_train and y_train
</span><span class="n">y_pred</span> <span class="o">=</span> <span class="n">gnb</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">).</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
<span class="c1"># Report testing accuracy
</span><span class="k">print</span><span class="p">(</span><span class="s">"Testing accuracy out of a total %d points : %f"</span> <span class="o">%</span> <span class="p">(</span><span class="n">X_test</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">accuracy_score</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">)))</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Testing accuracy out of a total 4872 points : 0.836412
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Implement KNN
</span><span class="n">neigh</span> <span class="o">=</span> <span class="n">KNeighborsClassifier</span><span class="p">(</span><span class="n">n_neighbors</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span> <span class="c1">#Best: n_neighbors=3
# Fit model: Predict y from x_test after training on x_train and y_train
</span><span class="n">y_pred</span> <span class="o">=</span> <span class="n">neigh</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">).</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
<span class="c1"># Report testing accuracy
</span><span class="k">print</span><span class="p">(</span><span class="s">"Testing accuracy out of a total %d points : %f"</span> <span class="o">%</span> <span class="p">(</span><span class="n">X_test</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">accuracy_score</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">)))</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Testing accuracy out of a total 4872 points : 0.853859
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Build classifier using SVM
</span><span class="n">SVM</span> <span class="o">=</span> <span class="n">svm</span><span class="p">.</span><span class="n">SVC</span><span class="p">(</span><span class="n">C</span><span class="o">=</span><span class="p">.</span><span class="mi">01</span><span class="p">,</span> <span class="n">kernel</span> <span class="o">=</span> <span class="s">'rbf'</span><span class="p">).</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span> <span class="c1">#Best: C=.01, kernel = 'rbf'
</span><span class="n">y_pred</span> <span class="o">=</span> <span class="n">SVM</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Testing accuracy out of a total %d points : %f"</span> <span class="o">%</span> <span class="p">(</span><span class="n">X_test</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">accuracy_score</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">)))</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Testing accuracy out of a total 4872 points : 0.853243
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Build classifier using simple neural network
</span><span class="n">NN</span> <span class="o">=</span> <span class="n">MLPClassifier</span><span class="p">(</span><span class="n">solver</span> <span class="o">=</span> <span class="s">'adam'</span><span class="p">,</span> <span class="n">learning_rate_init</span> <span class="o">=</span> <span class="mf">0.01</span><span class="p">,</span> <span class="n">max_iter</span> <span class="o">=</span> <span class="mi">150</span><span class="p">,</span> <span class="n">hidden_layer_sizes</span><span class="o">=</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">99</span><span class="p">).</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="n">y_pred</span> <span class="o">=</span> <span class="n">NN</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
<span class="n">acc</span> <span class="o">=</span> <span class="n">accuracy_score</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Testing accuracy out of a total %d points : %f"</span> <span class="o">%</span> <span class="p">(</span><span class="n">X_test</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">accuracy_score</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">)))</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Testing accuracy out of a total 4872 points : 0.828818
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Build classifier using CART
</span><span class="n">dct</span> <span class="o">=</span> <span class="n">DecisionTreeClassifier</span><span class="p">(</span><span class="n">max_depth</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">99</span><span class="p">)</span>
<span class="n">dct</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="n">y_pred</span> <span class="o">=</span> <span class="n">dct</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Testing accuracy out of a total %d points : %f"</span> <span class="o">%</span> <span class="p">(</span><span class="n">X_test</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">accuracy_score</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">)))</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Testing accuracy out of a total 4872 points : 0.821839
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Build classifier using Random Forest
</span><span class="n">rf</span> <span class="o">=</span> <span class="n">RandomForestClassifier</span><span class="p">(</span><span class="n">n_estimators</span><span class="o">=</span><span class="mi">200</span><span class="p">,</span> <span class="n">max_depth</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">99</span><span class="p">)</span>
<span class="n">rf</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="n">y_pred</span> <span class="o">=</span> <span class="n">rf</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Testing accuracy out of a total %d points : %f"</span> <span class="o">%</span> <span class="p">(</span><span class="n">X_test</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">accuracy_score</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">)))</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Testing accuracy out of a total 4872 points : 0.809524
</code></pre></div></div>

<p>SVM with C=0.01 and kernel=â€™rbfâ€™ performed the best in the validation set. Test its true accuracy on the test set.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X_test</span> <span class="o">=</span> <span class="n">X_df_test</span>
<span class="n">y_test</span> <span class="o">=</span> <span class="n">y_df_test</span>
<span class="n">y_pred</span> <span class="o">=</span> <span class="n">SVM</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Testing accuracy out of a total %d points : %f"</span> <span class="o">%</span> <span class="p">(</span><span class="n">X_test</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">accuracy_score</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">)))</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Testing accuracy out of a total 4880 points : 0.897336
</code></pre></div></div>

<p>The accuracy on the test set was <strong>0.897336</strong>. Not bad. The accuracy would be improved if the variables were forecasted better. Now plot the confusion matrix.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Plot confusion matrix
</span><span class="n">titles_options</span> <span class="o">=</span> <span class="p">[(</span><span class="s">"Confusion matrix, without normalization"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                  <span class="p">(</span><span class="s">"Normalized confusion matrix"</span><span class="p">,</span> <span class="s">'true'</span><span class="p">)]</span>
<span class="k">for</span> <span class="n">title</span><span class="p">,</span> <span class="n">normalize</span> <span class="ow">in</span> <span class="n">titles_options</span><span class="p">:</span>
    <span class="n">disp</span> <span class="o">=</span> <span class="n">plot_confusion_matrix</span><span class="p">(</span><span class="n">SVM</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_test</span><span class="p">,</span>
                                 <span class="n">cmap</span><span class="o">=</span><span class="n">plt</span><span class="p">.</span><span class="n">cm</span><span class="p">.</span><span class="n">Blues</span><span class="p">,</span>
                                 <span class="n">normalize</span><span class="o">=</span><span class="n">normalize</span><span class="p">)</span>
    <span class="n">disp</span><span class="p">.</span><span class="n">ax_</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="n">title</span><span class="p">)</span>

    <span class="k">print</span><span class="p">(</span><span class="n">title</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">disp</span><span class="p">.</span><span class="n">confusion_matrix</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Confusion matrix, without normalization
[[3282  501]
 [   0 1097]]
Normalized confusion matrix
[[0.86756542 0.13243458]
 [0.         1.        ]]
</code></pre></div></div>

<p><img src="/images/output_130_1.png" alt="png" /></p>

<p><img src="/images/output_130_2.png" alt="png" /></p>

<h4 id="conclusion">Conclusion</h4>
<p>The final model chosen to predict Occupancy when the variables Temperature, Humidity, Light, and CO2 were forecasted from the training set was a Support Vector Model with margin C=0.01 and kernel=â€™rbfâ€™. This model performed the best in the validation set and resulted in a 89.7% accuracy in the test set. The confusion matrix shows that out of 4880 total test data points (minutes), 3282 points were correctly identified as unoccupied (true negatives), 1097 points were correctly identified as occupied (true positives), 501 points were incorrectly identified as occupied when they were unoccupied (false positives), and 0 points were incorrectly identified as unoccupied when they were occupied (false negatives). For the future, the model could be improved by tuning the trend component for forecasting the variables, and building and testing models on subsets of the parameters.</p>
:ET